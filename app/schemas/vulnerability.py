"""
Vulnerability Scanning Schemas
Pydantic models for vulnerability scanning requests and responses
"""

import uuid
from typing import Any, Dict, List, Optional

from pydantic import BaseModel, Field


class VulnerabilityInfo(BaseModel):
    """Individual vulnerability information"""

    cve_id: str = Field(..., description="CVE identifier")
    severity: str = Field(
        ..., description="Vulnerability severity (Critical/High/Medium/Low)"
    )
    description: str = Field(..., description="Brief vulnerability description")
    source_url: Optional[str] = Field(None, description="Source URL if available")
    source: str = Field(
        ..., description="Data source (local_cve_database, web_search, etc.)"
    )


class DeviceVulnerabilityResult(BaseModel):
    """Vulnerability scan result for a single device"""

    device_info: Dict[str, Any] = Field(..., description="Device information")
    scan_timestamp: str = Field(..., description="When the scan was performed")
    source: str = Field(..., description="Data source used for scan")
    vulnerabilities_found: bool = Field(
        ..., description="Whether vulnerabilities were found"
    )
    vulnerability_count: int = Field(..., description="Number of vulnerabilities found")
    vulnerabilities: List[VulnerabilityInfo] = Field(
        default=[], description="List of vulnerabilities"
    )
    confidence_score: float = Field(..., description="Confidence score (0.0-1.0)")
    ai_analysis_used: bool = Field(
        default=False, description="Whether AI analysis was used"
    )
    ai_summary: Optional[str] = Field(None, description="AI analysis summary")
    false_positives_filtered: Optional[int] = Field(
        None, description="Number of false positives filtered by AI"
    )
    raw_search_count: Optional[int] = Field(
        None, description="Number of raw search results"
    )
    error: Optional[str] = Field(None, description="Error message if scan failed")


class BatchScanRequest(BaseModel):
    """Request for batch vulnerability scanning"""

    device_ids: List[uuid.UUID] = Field(
        ..., description="List of device UUIDs to scan", max_length=50
    )


class VulnerableDeviceInfo(BaseModel):
    """Information about a vulnerable device in batch results"""

    device: Dict[str, Any] = Field(..., description="Device information")
    vulnerability_count: int = Field(..., description="Number of vulnerabilities found")
    confidence_score: float = Field(..., description="Confidence score")


class BatchScanResult(BaseModel):
    """Result of batch vulnerability scanning"""

    scan_timestamp: str = Field(..., description="When the batch scan was performed")
    total_devices_requested: int = Field(
        ..., description="Total devices requested for scanning"
    )
    total_devices_scanned: int = Field(
        ..., description="Total devices successfully scanned"
    )
    total_vulnerable_devices: int = Field(
        ..., description="Total devices with vulnerabilities"
    )
    vulnerability_rate: float = Field(
        ..., description="Percentage of vulnerable devices"
    )
    vulnerable_devices: List[VulnerableDeviceInfo] = Field(
        default=[], description="List of vulnerable devices"
    )
    detailed_results: List[DeviceVulnerabilityResult] = Field(
        default=[], description="Detailed results for each device"
    )
    scan_settings: Dict[str, Any] = Field(..., description="Scan configuration used")


class ScanStatusResponse(BaseModel):
    """Vulnerability scanning system status"""

    vulnerability_scanning: Dict[str, Any] = Field(
        ..., description="System status and configuration"
    )


class QuickScanResult(BaseModel):
    """Result of quick vulnerability check"""

    success: bool = Field(..., description="Whether the scan was successful")
    message: str = Field(..., description="Status message")
    device_info: Dict[str, Any] = Field(..., description="Device information")
    source: str = Field(..., description="Data source (local_cve_database_only)")
    vulnerabilities_found: bool = Field(
        ..., description="Whether vulnerabilities were found"
    )
    vulnerability_count: int = Field(..., description="Number of vulnerabilities found")
    vulnerabilities: List[VulnerabilityInfo] = Field(
        default=[], description="List of vulnerabilities"
    )
    note: str = Field(..., description="Additional information about the scan type")


class ScanResponse(BaseModel):
    """Standard response for vulnerability scans"""

    success: bool = Field(..., description="Whether the operation was successful")
    message: str = Field(..., description="Status message")
    scan_result: Optional[DeviceVulnerabilityResult] = Field(
        None, description="Scan result details"
    )


class BatchScanResponse(BaseModel):
    """Response for batch vulnerability scans"""

    success: bool = Field(..., description="Whether the operation was successful")
    message: str = Field(..., description="Status message")
    scan_results: Optional[BatchScanResult] = Field(
        None, description="Batch scan results"
    )


class BackgroundScanResponse(BaseModel):
    """Response for background scan operations"""

    success: bool = Field(..., description="Whether the operation was successful")
    message: str = Field(..., description="Status message")
    status: str = Field(..., description="Processing status")
    device_count: int = Field(..., description="Number of devices being scanned")
    note: str = Field(..., description="Additional information")
    scan_results: Optional[BatchScanResult] = Field(
        None, description="Scan results (if completed synchronously)"
    )
