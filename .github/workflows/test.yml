name: 🧪 Test Suite

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_call:
    outputs:
      test-status:
        description: "Test execution status"
        value: ${{ jobs.unit-tests.outputs.status }}

env:
  PYTHON_VERSION: '3.11'

jobs:
  unit-tests:
    name: 🧪 Unit Tests
    runs-on: ubuntu-latest
    outputs:
      status: ${{ steps.test-status.outputs.status }}
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: testpassword
          POSTGRES_USER: testuser
          POSTGRES_DB: testdb
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      mongodb:
        image: mongo:7
        env:
          MONGO_INITDB_ROOT_USERNAME: testuser
          MONGO_INITDB_ROOT_PASSWORD: testpassword
        options: >-
          --health-cmd "echo 'db.runCommand(\"ping\").ok' | mongosh localhost:27017/test --quiet"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 27017:27017

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5        ports:
          - 6379:6379

    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4

    - name: 🐍 Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: 📦 Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: latest
        virtualenvs-create: true
        virtualenvs-in-project: true

    - name: 🔧 Load cached venv
      id: cached-poetry-dependencies
      uses: actions/cache@v3
      with:
        path: .venv
        key: venv-${{ runner.os }}-${{ env.PYTHON_VERSION }}-${{ hashFiles('**/poetry.lock') }}

    - name: 📚 Install Dependencies
      if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
      run: poetry install

    - name: 🧪 Run Unit Tests
      env:
        DATABASE_URL: postgresql://testuser:testpassword@localhost:5432/testdb
        MONGODB_URL: mongodb://testuser:testpassword@localhost:27017/test_cve_db
        REDIS_URL: redis://localhost:6379
        GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY_TEST }}
        BRAVE_SEARCH_API_KEY: ${{ secrets.BRAVE_SEARCH_API_KEY_TEST }}
      run: |
        poetry run pytest tests/unit/ \
          --cov=app \
          --cov-report=xml \
          --cov-report=html \
          --cov-report=term-missing \
          --junitxml=unit-test-results.xml \
          --tb=short \
          -v

    - name: 📊 Upload Unit Test Results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: unit-test-results-${{ github.run_id }}
        path: |
          unit-test-results.xml
          htmlcov/
          coverage.xml
        retention-days: 30

    - name: 📈 Upload Coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-unit-tests

    - name: 🎯 Set Test Status
      id: test-status
      if: always()
      run: |
        if [ "${{ job.status }}" == "success" ]; then
          echo "status=passed" >> $GITHUB_OUTPUT
        else
          echo "status=failed" >> $GITHUB_OUTPUT
        fi

  integration-tests:
    name: 🔗 Integration Tests
    runs-on: ubuntu-latest
    needs: unit-tests
    
    services:
      vulntrack-api:
        image: python:3.11-slim
        ports:
          - 8000:8000

    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4

    - name: 🐍 Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: 📦 Install Poetry
      uses: snok/install-poetry@v1

    - name: 📚 Install Dependencies
      run: poetry install

    - name: 🚀 Start Test API Server
      run: |
        poetry run uvicorn app.main:app --host 0.0.0.0 --port 8000 &
        echo $! > api_server.pid
        sleep 15
      env:
        ENVIRONMENT: testing
        DATABASE_URL: sqlite:///./test.db
        GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY_TEST }}
        BRAVE_SEARCH_API_KEY: ${{ secrets.BRAVE_SEARCH_API_KEY_TEST }}

    - name: 🏥 Health Check
      run: |
        curl -f http://localhost:8000/ || exit 1
        curl -f http://localhost:8000/api/v1/health || exit 1

    - name: 🌐 Set up Node.js for API Testing
      uses: actions/setup-node@v4
      with:
        node-version: '18'

    - name: 📦 Install Newman
      run: npm install -g newman newman-reporter-htmlextra

    - name: 🧪 Run API Integration Tests
      run: |
        if [ -f "docs/VulnTrack_Postman_Collection.json" ]; then
          newman run docs/VulnTrack_Postman_Collection.json \
            --environment docs/test-environment.json \
            --reporters cli,htmlextra \
            --reporter-htmlextra-export integration-test-report.html \
            --bail
        else
          echo "⚠️ Postman collection not found, running basic API tests"
          # Basic API tests
          curl -X GET http://localhost:8000/api/v1/devices/ -H "Accept: application/json"
          curl -X GET http://localhost:8000/api/v1/vulnerabilities/scan/status -H "Accept: application/json"
        fi

    - name: 🧹 Cleanup
      if: always()
      run: |
        if [ -f api_server.pid ]; then
          kill $(cat api_server.pid) || true
        fi

    - name: 📊 Upload Integration Test Results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: integration-test-results-${{ github.run_id }}
        path: integration-test-report.html
        retention-days: 30

  test-summary:
    name: 📋 Test Summary
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests]
    if: always()
    
    steps:
    - name: 📊 Generate Test Summary
      run: |
        echo "## 🧪 Test Execution Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "| Test Suite | Status |" >> $GITHUB_STEP_SUMMARY
        echo "|------------|--------|" >> $GITHUB_STEP_SUMMARY
        echo "| Unit Tests | ${{ needs.unit-tests.result == 'success' && '✅ PASSED' || '❌ FAILED' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Integration Tests | ${{ needs.integration-tests.result == 'success' && '✅ PASSED' || '❌ FAILED' }} |" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [[ "${{ needs.unit-tests.result }}" == "success" && "${{ needs.integration-tests.result }}" == "success" ]]; then
          echo "### 🎉 All tests passed successfully!" >> $GITHUB_STEP_SUMMARY
        else
          echo "### ⚠️ Some tests failed. Please review the detailed reports." >> $GITHUB_STEP_SUMMARY
        fi
