name: 📦 Release Management

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., v1.0.0)'
        required: true
        type: string
      prerelease:
        description: 'Mark as pre-release'
        required: false
        type: boolean
        default: false

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # ==========================================
  # Prepare Release
  # ==========================================
  prepare-release:
    name: 🎯 Prepare Release
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      tag: ${{ steps.version.outputs.tag }}
      is_prerelease: ${{ steps.version.outputs.is_prerelease }}

    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: 🏷️ Extract Version Info
      id: version
      run: |
        if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
          VERSION="${{ github.event.inputs.version }}"
          IS_PRERELEASE="${{ github.event.inputs.prerelease }}"
        else
          VERSION="${GITHUB_REF#refs/tags/}"
          # Check if it's a prerelease (contains alpha, beta, rc)
          if [[ "$VERSION" =~ (alpha|beta|rc) ]]; then
            IS_PRERELEASE="true"
          else
            IS_PRERELEASE="false"
          fi
        fi
        
        echo "version=${VERSION}" >> $GITHUB_OUTPUT
        echo "tag=${VERSION}" >> $GITHUB_OUTPUT
        echo "is_prerelease=${IS_PRERELEASE}" >> $GITHUB_OUTPUT
        
        echo "📦 Release Version: ${VERSION}"
        echo "🏷️ Tag: ${VERSION}"
        echo "🧪 Pre-release: ${IS_PRERELEASE}"

  # ==========================================
  # Build and Test
  # ==========================================
  build-and-test:
    name: 🏗️ Build and Test
    runs-on: ubuntu-latest
    needs: prepare-release

    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4

    - name: 🐍 Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: 📦 Install Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install poetry
        poetry install --with dev

    - name: 🧪 Run Tests
      run: |
        poetry run pytest tests/ \
          --cov=app \
          --cov-report=xml \
          --junitxml=pytest-report.xml \
          -v

    - name: 📊 Upload Test Results
      uses: actions/upload-artifact@v3
      with:
        name: test-results-${{ needs.prepare-release.outputs.version }}
        path: |
          pytest-report.xml
          coverage.xml

  # ==========================================
  # Build Docker Images
  # ==========================================
  build-docker:
    name: 🐳 Build Docker Images
    runs-on: ubuntu-latest
    needs: [prepare-release, build-and-test]
    permissions:
      contents: read
      packages: write

    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4

    - name: 🐳 Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: 🔑 Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: 🏷️ Extract Metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=tag
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=semver,pattern={{major}}
          type=raw,value=latest,enable={{is_default_branch}}

    - name: 🏗️ Build and Push Docker Image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        build-args: |
          VERSION=${{ needs.prepare-release.outputs.version }}
          BUILD_DATE=$(date -u +'%Y-%m-%dT%H:%M:%SZ')
          VCS_REF=${{ github.sha }}

    - name: 🔒 Sign Container Image
      env:
        COSIGN_EXPERIMENTAL: 1
      run: |
        echo "🔒 Signing container image..."
        # Install cosign
        curl -O -L "https://github.com/sigstore/cosign/releases/latest/download/cosign-linux-amd64"
        sudo mv cosign-linux-amd64 /usr/local/bin/cosign
        sudo chmod +x /usr/local/bin/cosign
        
        # Sign the image
        cosign sign --yes ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.prepare-release.outputs.version }}

  # ==========================================
  # Security Scan Release
  # ==========================================
  security-scan-release:
    name: 🔒 Security Scan Release
    runs-on: ubuntu-latest
    needs: [prepare-release, build-docker]

    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4

    - name: 🔒 Run Trivy Vulnerability Scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.prepare-release.outputs.version }}
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: 📊 Upload Trivy Results
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'

    - name: 🔒 Critical Vulnerability Check
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.prepare-release.outputs.version }}
        format: 'table'
        severity: 'CRITICAL'
        exit-code: '1'

  # ==========================================
  # Generate Release Notes
  # ==========================================
  generate-release-notes:
    name: 📝 Generate Release Notes
    runs-on: ubuntu-latest
    needs: prepare-release
    outputs:
      release_notes: ${{ steps.release_notes.outputs.notes }}

    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: 📝 Generate Release Notes
      id: release_notes
      run: |
        # Get the previous tag
        PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD~1 2>/dev/null || echo "")
        CURRENT_TAG="${{ needs.prepare-release.outputs.version }}"
        
        echo "## 🚀 VulnTrack Backend ${CURRENT_TAG}" > release_notes.md
        echo "" >> release_notes.md
        echo "### 📅 Release Information" >> release_notes.md
        echo "- **Version**: ${CURRENT_TAG}" >> release_notes.md
        echo "- **Release Date**: $(date -u +'%Y-%m-%d')" >> release_notes.md
        echo "- **Docker Image**: \`ghcr.io/${{ github.repository }}:${CURRENT_TAG}\`" >> release_notes.md
        echo "" >> release_notes.md
        
        if [[ -n "$PREVIOUS_TAG" ]]; then
          echo "### 📋 Changes Since ${PREVIOUS_TAG}" >> release_notes.md
          echo "" >> release_notes.md
          
          # Get commits since last tag
          git log ${PREVIOUS_TAG}..HEAD --pretty=format:"- %s (%h)" --no-merges >> release_notes.md
          echo "" >> release_notes.md
        fi
        
        echo "" >> release_notes.md
        echo "### 🛡️ Security Features" >> release_notes.md
        echo "- Advanced vulnerability scanning with multiple data sources" >> release_notes.md
        echo "- AI-powered vulnerability analysis with Gemini AI" >> release_notes.md
        echo "- Real-time CVE database integration" >> release_notes.md
        echo "- Web search intelligence with Brave Search API" >> release_notes.md
        echo "- Comprehensive device management and tracking" >> release_notes.md
        echo "" >> release_notes.md
        echo "### 📦 Installation" >> release_notes.md
        echo "\`\`\`bash" >> release_notes.md
        echo "# Pull the Docker image" >> release_notes.md
        echo "docker pull ghcr.io/${{ github.repository }}:${CURRENT_TAG}" >> release_notes.md
        echo "" >> release_notes.md
        echo "# Run with docker-compose" >> release_notes.md
        echo "docker-compose up -d" >> release_notes.md
        echo "\`\`\`" >> release_notes.md
        echo "" >> release_notes.md
        echo "### 🔗 API Documentation" >> release_notes.md
        echo "- **Swagger UI**: \`http://localhost:8000/docs\`" >> release_notes.md
        echo "- **ReDoc**: \`http://localhost:8000/redoc\`" >> release_notes.md
        echo "- **Postman Collection**: \`docs/VulnTrack_Postman_Collection.json\`" >> release_notes.md
        echo "- **Insomnia Collection**: \`docs/Insomnia_sample_doc_endpoint.yaml\`" >> release_notes.md
        
        # Store release notes as output
        echo "notes<<EOF" >> $GITHUB_OUTPUT
        cat release_notes.md >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT

    - name: 📊 Upload Release Notes
      uses: actions/upload-artifact@v3
      with:
        name: release-notes-${{ needs.prepare-release.outputs.version }}
        path: release_notes.md

  # ==========================================
  # Create GitHub Release
  # ==========================================
  create-release:
    name: 🎉 Create GitHub Release
    runs-on: ubuntu-latest
    needs: [prepare-release, build-and-test, build-docker, security-scan-release, generate-release-notes]
    permissions:
      contents: write

    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4

    - name: 📦 Download Artifacts
      uses: actions/download-artifact@v3
      with:
        path: ./artifacts

    - name: 🎉 Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ needs.prepare-release.outputs.tag }}
        name: "VulnTrack Backend ${{ needs.prepare-release.outputs.version }}"
        body: ${{ needs.generate-release-notes.outputs.release_notes }}
        prerelease: ${{ needs.prepare-release.outputs.is_prerelease == 'true' }}
        files: |
          ./artifacts/**/*
        generate_release_notes: true

  # ==========================================
  # Post-Release Tasks
  # ==========================================
  post-release:
    name: 📋 Post-Release Tasks
    runs-on: ubuntu-latest
    needs: [prepare-release, create-release]

    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4

    - name: 📋 Update Documentation
      run: |
        echo "📋 Post-release tasks for ${{ needs.prepare-release.outputs.version }}"
        echo "✅ Docker image published"
        echo "✅ GitHub release created"
        echo "✅ Security scans completed"
        echo "📦 Image: ghcr.io/${{ github.repository }}:${{ needs.prepare-release.outputs.version }}"

    - name: 🎯 Create Summary
      run: |
        echo "## 🎉 Release ${{ needs.prepare-release.outputs.version }} Complete!" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 📦 Release Artifacts:" >> $GITHUB_STEP_SUMMARY
        echo "- **GitHub Release**: [View Release](https://github.com/${{ github.repository }}/releases/tag/${{ needs.prepare-release.outputs.tag }})" >> $GITHUB_STEP_SUMMARY
        echo "- **Docker Image**: \`ghcr.io/${{ github.repository }}:${{ needs.prepare-release.outputs.version }}\`" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 🚀 Quick Start:" >> $GITHUB_STEP_SUMMARY
        echo "\`\`\`bash" >> $GITHUB_STEP_SUMMARY
        echo "docker pull ghcr.io/${{ github.repository }}:${{ needs.prepare-release.outputs.version }}" >> $GITHUB_STEP_SUMMARY
        echo "docker run -p 8000:8000 ghcr.io/${{ github.repository }}:${{ needs.prepare-release.outputs.version }}" >> $GITHUB_STEP_SUMMARY
        echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
