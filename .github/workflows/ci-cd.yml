name: 🧪 CI/CD Pipeline - VulnTrack Backend

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  release:
    types: [ published ]

env:
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '18'

jobs:
  # ==========================================
  # Code Quality & Security Analysis
  # ==========================================  code-quality:
    name: 🔍 Code Quality & Security
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: 🐍 Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: 📦 Install Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install poetry
        poetry install --with dev

    - name: 🔍 Code Formatting (Black)
      run: |
        poetry run black --check --diff app/ tests/

    - name: 📏 Import Sorting (isort)
      run: |
        poetry run isort --check-only --diff app/ tests/

    - name: 🔎 Linting (flake8)
      run: |
        poetry run flake8 app/ tests/

    - name: 🦆 Type Checking (mypy)
      run: |
        poetry run mypy app/

    - name: 🔒 Security Audit (bandit)
      run: |
        poetry run bandit -r app/ -f json -o bandit-report.json
        poetry run bandit -r app/

    - name: 📊 Upload Security Report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-report
        path: bandit-report.json

    - name: 🐛 Dependency Vulnerability Check
      run: |
        poetry run safety check --json --output safety-report.json
        poetry run safety check

    - name: 📊 Upload Dependency Report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: dependency-security-report
        path: safety-report.json

  # ==========================================
  # Unit & Integration Tests
  # ==========================================
  test:
    name: 🧪 Testing Suite
    runs-on: ubuntu-latest
    needs: code-quality
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: testpassword
          POSTGRES_USER: testuser
          POSTGRES_DB: testdb
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      mongodb:
        image: mongo:7
        env:
          MONGO_INITDB_ROOT_USERNAME: testuser
          MONGO_INITDB_ROOT_PASSWORD: testpassword
        options: >-
          --health-cmd "echo 'db.runCommand(\"ping\").ok' | mongosh localhost:27017/test --quiet"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 27017:27017

    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4

    - name: 🐍 Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: 📦 Install Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install poetry
        poetry install --with dev

    - name: 🧪 Run Unit Tests
      env:
        DATABASE_URL: postgresql://testuser:testpassword@localhost:5432/testdb
        MONGODB_URL: mongodb://testuser:testpassword@localhost:27017/test_cve_db
        GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY_TEST }}
        BRAVE_SEARCH_API_KEY: ${{ secrets.BRAVE_SEARCH_API_KEY_TEST }}
      run: |
        poetry run pytest tests/ \
          --cov=app \
          --cov-report=xml \
          --cov-report=html \
          --cov-report=term-missing \
          --junitxml=pytest-report.xml \
          -v    - name: 📊 Upload Coverage Reports
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

    - name: 📊 Upload Test Results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results
        path: |
          pytest-report.xml
          htmlcov/
          coverage.xml

  # ==========================================
  # API Integration Tests
  # ==========================================
  integration-test:
    name: 🌐 API Integration Tests
    runs-on: ubuntu-latest
    needs: test

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: testpassword
          POSTGRES_USER: testuser
          POSTGRES_DB: testdb
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4

    - name: 🐍 Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: 📦 Install Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install poetry
        poetry install

    - name: 🚀 Start API Server
      env:
        DATABASE_URL: postgresql://testuser:testpassword@localhost:5432/testdb
        ENVIRONMENT: testing
      run: |
        poetry run uvicorn app.main:app --host 0.0.0.0 --port 8000 &
        sleep 10

    - name: 🔍 Health Check
      run: |
        curl -f http://localhost:8000/ || exit 1

    - name: 🧪 API Integration Tests
      run: |
        # Test device endpoints
        curl -X GET http://localhost:8000/api/v1/devices/ -H "Accept: application/json"
        
        # Test vulnerability status
        curl -X GET http://localhost:8000/api/v1/vulnerabilities/scan/status -H "Accept: application/json"

    - name: 📊 Newman API Tests (if Postman collection exists)
      run: |
        npm install -g newman
        if [ -f "docs/VulnTrack_Postman_Collection.json" ]; then
          newman run docs/VulnTrack_Postman_Collection.json \
            --environment docs/test-environment.json \
            --reporters cli,htmlextra \
            --reporter-htmlextra-export newman-report.html
        fi    - name: 📊 Upload API Test Results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: api-test-results
        path: newman-report.html

  # ==========================================
  # Docker Build & Security Scan
  # ==========================================
  docker-build:
    name: 🐳 Docker Build & Security Scan
    runs-on: ubuntu-latest
    needs: test

    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4

    - name: 🐳 Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: 🏗️ Build Docker Image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: false
        tags: vulntrack-backend:test
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: 🔒 Run Trivy Security Scan
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: vulntrack-backend:test
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: 📊 Upload Trivy Results
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  # ==========================================
  # Performance Testing
  # ==========================================
  performance-test:
    name: ⚡ Performance Testing
    runs-on: ubuntu-latest
    needs: integration-test
    if: github.event_name == 'pull_request'

    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4

    - name: 🐍 Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: 📦 Install Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install poetry locust
        poetry install

    - name: 🚀 Start API Server
      env:
        DATABASE_URL: sqlite:///./test.db
        ENVIRONMENT: testing
      run: |
        poetry run uvicorn app.main:app --host 0.0.0.0 --port 8000 &
        sleep 10

    - name: ⚡ Run Performance Tests
      run: |
        locust --host=http://localhost:8000 \
               --users 10 \
               --spawn-rate 1 \
               --run-time 60s \
               --headless \
               --html performance-report.html \
               -f tests/performance/locustfile.py    - name: 📊 Upload Performance Results
      uses: actions/upload-artifact@v4
      with:
        name: performance-results
        path: performance-report.html

  # ==========================================
  # Deployment (Production)
  # ==========================================
  deploy-production:
    name: 🚀 Deploy to Production
    runs-on: ubuntu-latest
    needs: [code-quality, test, integration-test, docker-build]
    if: github.event_name == 'release' && github.event.action == 'published'
    environment:
      name: production

    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4

    - name: 🐳 Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: 🔑 Login to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: 🏗️ Build and Push Docker Image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: |
          ghcr.io/${{ github.repository }}:latest
          ghcr.io/${{ github.repository }}:${{ github.event.release.tag_name }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: 🚀 Deploy to Production
      run: |
        echo "🚀 Deploying VulnTrack Backend to Production"
        echo "📦 Image: ghcr.io/${{ github.repository }}:${{ github.event.release.tag_name }}"
        # Add your deployment scripts here
        # e.g., kubectl, docker-compose, etc.

  # ==========================================
  # Deployment (Staging)
  # ==========================================
  deploy-staging:
    name: 🧪 Deploy to Staging
    runs-on: ubuntu-latest
    needs: [code-quality, test, integration-test]
    if: github.ref == 'refs/heads/develop'
    environment:
      name: staging

    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4

    - name: 🐳 Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: 🔑 Login to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: 🏗️ Build and Push Docker Image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: ghcr.io/${{ github.repository }}:staging
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: 🧪 Deploy to Staging
      run: |
        echo "🧪 Deploying VulnTrack Backend to Staging"
        echo "📦 Image: ghcr.io/${{ github.repository }}:staging"
        # Add your staging deployment scripts here

  # ==========================================
  # Notification
  # ==========================================
  notify:
    name: 📢 Notifications
    runs-on: ubuntu-latest
    needs: [code-quality, test, integration-test, docker-build]
    if: always()

    steps:
    - name: 📢 Notify Success
      if: ${{ needs.code-quality.result == 'success' && needs.test.result == 'success' }}
      run: |
        echo "✅ VulnTrack Backend Pipeline: SUCCESS"
        echo "🔍 Code Quality: ✅"
        echo "🧪 Tests: ✅"
        echo "🌐 Integration: ✅"
        echo "🐳 Docker: ✅"

    - name: 📢 Notify Failure
      if: ${{ needs.code-quality.result == 'failure' || needs.test.result == 'failure' }}
      run: |
        echo "❌ VulnTrack Backend Pipeline: FAILED"
        echo "🔍 Code Quality: ${{ needs.code-quality.result }}"
        echo "🧪 Tests: ${{ needs.test.result }}"
        echo "🌐 Integration: ${{ needs.integration-test.result }}"
        echo "🐳 Docker: ${{ needs.docker-build.result }}"
