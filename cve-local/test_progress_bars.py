#!/usr/bin/env python3
"""
Test CVE Loader with Progress Bars
Simple test to demonstrate the progress bar functionality
"""

from tqdm import tqdm
import time
import subprocess
import sys

def test_progress_bar():
    """Test the progress bar functionality"""
    
    print("🔍 Testing CVE Loader with Progress Bars")
    print("="*50)
    
    # Test 1: Simple progress bar
    print("\n📊 Test 1: Basic Progress Bar")
    for i in tqdm(range(100), desc="Processing", unit="items"):
        time.sleep(0.01)  # Simulate work
    
    # Test 2: File processing simulation
    print("\n📁 Test 2: File Processing Simulation")
    files = [f"CVE-2024-{i:04d}.json" for i in range(1, 51)]
    
    with tqdm(total=len(files), desc="Loading CVEs", unit="files",
              bar_format="{l_bar}{bar}| {n_fmt}/{total_fmt} [{elapsed}<{remaining}, {rate_fmt}]") as pbar:
        
        loaded_count = 0
        for i, filename in enumerate(files):
            # Simulate processing
            time.sleep(0.02)
            loaded_count += 1
            
            pbar.update(1)
            pbar.set_postfix_str(f"💾 Loaded: {loaded_count} CVEs")
    
    print(f"\n✅ Test completed! Processed {len(files)} files")
    
    # Test 3: Try the actual CVE loader if available
    print("\n🚀 Test 3: Actual CVE Loader Test")
    try:
        print("Testing with actual CVE data (5 files)...")
        result = subprocess.run([
            sys.executable, "cve_database_loader.py", 
            "--year", "2024", "--limit", "5", "--stats-only"
        ], capture_output=True, text=True, timeout=30)
        
        if result.returncode == 0:
            print("✅ CVE loader is working!")
            print("Database stats:")
            print(result.stdout)
        else:
            print("❌ CVE loader has issues:")
            print(result.stderr)
    except Exception as e:
        print(f"❌ Could not test CVE loader: {e}")

if __name__ == "__main__":
    test_progress_bar()
