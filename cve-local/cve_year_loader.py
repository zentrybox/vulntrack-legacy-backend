#!/usr/bin/env python3
"""
CVE Year Loader
Handles loading CVE data for specific years with progress tracking
"""

from pathlib import Path
from typing import List, Optional
from tqdm import tqdm
import time
from cve_loader_core import CVELoader

class CVEYearLoader:
    """Loads CVE data for specific years"""
    
    def __init__(self, loader: CVELoader):
        self.loader = loader
        self.cve_data_dir = loader.cve_data_dir
    
    def count_files_in_year(self, year: str) -> int:
        """Count total JSON files for a year"""
        year_dir = self.cve_data_dir / year
        if not year_dir.exists():
            return 0
        
        total_files = 0
        for subdir in year_dir.iterdir():
            if subdir.is_dir():
                total_files += len(list(subdir.glob("*.json")))
        
        return total_files
    
    def load_year(self, year: str, batch_size: int = 200, limit: Optional[int] = None) -> int:
        """Load CVE data for a specific year with progress bar"""
        year_dir = self.cve_data_dir / year
        if not year_dir.exists():
            print(f"❌ Year directory {year} not found")
            return 0
        
        # Count total files first
        total_files = self.count_files_in_year(year)
        if limit:
            total_files = min(total_files, limit)
        
        print(f"\n🔍 Loading CVE data for year {year}")
        print(f"📊 Found {total_files:,} files to process")
        
        batch = []
        total_loaded = 0
        processed_files = 0
        
        # Create progress bar
        with tqdm(total=total_files, desc=f"Year {year}", 
                 unit="files", colour="green",
                 bar_format="{l_bar}{bar}| {n_fmt}/{total_fmt} [{elapsed}<{remaining}, {rate_fmt}] CVEs: {postfix}") as pbar:
            
            # Process all subdirectories
            for subdir in sorted(year_dir.iterdir()):
                if not subdir.is_dir():
                    continue
                
                # Process JSON files in subdirectory
                for json_file in sorted(subdir.glob("*.json")):
                    if limit and processed_files >= limit:
                        break
                    
                    cve_doc = self.loader.process_file(json_file)
                    if cve_doc:
                        batch.append(cve_doc)
                    
                    processed_files += 1
                    pbar.update(1)
                    pbar.set_postfix_str(f"{total_loaded:,}")
                    
                    # Process batch when full
                    if len(batch) >= batch_size:
                        loaded = self.loader.load_batch(batch)
                        total_loaded += loaded
                        batch = []
                        pbar.set_postfix_str(f"{total_loaded:,}")
                    
                    if limit and processed_files >= limit:
                        break
                
                if limit and processed_files >= limit:
                    break
            
            # Process remaining batch
            if batch:
                loaded = self.loader.load_batch(batch)
                total_loaded += loaded
                pbar.set_postfix_str(f"{total_loaded:,}")
        
        print(f"✅ Year {year} completed: {total_loaded:,} CVEs loaded")
        return total_loaded
    
    def load_multiple_years(self, years: List[str], batch_size: int = 200, 
                           limit: Optional[int] = None) -> int:
        """Load multiple years with overall progress"""
        total_cves = 0
        
        print(f"\n🚀 Loading {len(years)} years: {', '.join(years)}")
        
        # Progress bar for years
        with tqdm(years, desc="Years", unit="year", colour="blue") as year_pbar:
            for year in year_pbar:
                year_pbar.set_description(f"Year {year}")
                
                start_time = time.time()
                year_cves = self.load_year(year, batch_size, limit)
                end_time = time.time()
                
                total_cves += year_cves
                duration = end_time - start_time
                
                year_pbar.set_postfix_str(f"Total: {total_cves:,} CVEs, {duration:.1f}s")
                
                # Small pause between years
                time.sleep(1)
        
        print(f"\n🎉 All years completed: {total_cves:,} total CVEs loaded")
        return total_cves
