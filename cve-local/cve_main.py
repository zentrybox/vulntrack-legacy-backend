#!/usr/bin/env python3
"""
🔥 CVE Progressive Loader - Ultimate Edition
The best CVE loader with all options and beautiful interface
"""

import sys
import time
from datetime import datetime
from cve_loader_core import CVELoader
from cve_year_loader import CVEYearLoader

class CVEProgressiveLoader:
    """Ultimate CVE Progressive Loader"""
    
    def __init__(self):
        self.loader = CVELoader()
        self.year_loader = CVEYearLoader(self.loader)
    
    def show_banner(self):
        """Show beautiful banner"""
        banner = """
╔═══════════════════════════════════════════════════════════════╗
║                     🔥 CVE PROGRESSIVE LOADER                 ║
║                        Ultimate Edition                       ║
║                                                              ║
║              Load CVE data into MongoDB efficiently          ║
╚═══════════════════════════════════════════════════════════════╝
        """
        print(banner)
    
    def show_menu(self):
        """Show main menu"""
        print("\n🔥 CVE Progressive Loader Options:")
        print("1. Load recent years (2023-2025) - RECOMMENDED ⭐")
        print("2. Load medium range (2020-2025)")
        print("3. Load all years (1999-2025) - WARNING: Very long! ⚠️")
        print("4. Load specific range")
        print("5. Show database stats only 📊")
        print("6. Resume previous loading")
        print("0. Exit")
    
    def test_connection(self) -> bool:
        """Test MongoDB connection"""
        print("\n🔍 Testing MongoDB connection...")
        if self.loader.connect():
            print("✅ MongoDB connection successful!")
            return True
        else:
            print("❌ MongoDB connection failed!")
            print("\n💡 Please start your MongoDB container:")
            print("docker run -d --name mongodb-container -p 27017:27017 \\")
            print("  -e MONGO_INITDB_ROOT_USERNAME=user -e MONGO_INITDB_ROOT_PASSWORD=password mongo")
            return False
    
    def show_stats(self):
        """Show database statistics"""
        print("\n📊 Database Statistics:")
        print("=" * 60)
        
        stats = self.loader.get_stats()
        
        print(f"📄 Total Documents: {stats['total_documents']:,}")
        print(f"💾 Total Size: {stats['total_size_mb']} MB")
        print(f"🔍 Indexes: {stats['indexes']}")
        
        if stats['by_state']:
            print("\n📋 Documents by State:")
            for state_info in stats['by_state']:
                print(f"  • {state_info['_id']}: {state_info['count']:,}")
        
        if stats['by_severity']:
            print("\n⚠️  Documents by Severity:")
            for severity_info in stats['by_severity']:
                severity = severity_info['_id'] or 'Unknown'
                print(f"  • {severity}: {severity_info['count']:,}")
    
    def get_year_range(self, choice: str) -> tuple:
        """Get year range based on choice"""
        if choice == "1":
            return ("2023", "2025")
        elif choice == "2":
            return ("2020", "2025")
        elif choice == "3":
            return ("1999", "2025")
        elif choice == "4":
            start = input("📅 Enter start year (e.g., 2020): ").strip()
            end = input("📅 Enter end year (e.g., 2025): ").strip()
            return (start, end)
        else:
            return ("2023", "2025")
    
    def confirm_operation(self, start_year: str, end_year: str) -> bool:
        """Confirm operation with user"""
        available_years = self.loader.get_available_years()
        years_to_load = [y for y in available_years if start_year <= y <= end_year]
        
        print(f"\n📋 Years to process: {', '.join(years_to_load)}")
        print(f"📊 Total years: {len(years_to_load)}")
        
        # Estimate time and data
        if len(years_to_load) <= 3:
            estimated_time = f"{len(years_to_load) * 2-5} minutes"
            estimated_size = f"{len(years_to_load) * 50-100} MB"
        elif len(years_to_load) <= 6:
            estimated_time = f"{len(years_to_load) * 5-10} minutes"
            estimated_size = f"{len(years_to_load) * 100-200} MB"
        else:
            estimated_time = f"{len(years_to_load) * 10-30} minutes"
            estimated_size = f"{len(years_to_load) * 200-500} MB"
        
        print(f"⏱️  Estimated time: {estimated_time}")
        print(f"💾 Estimated size: {estimated_size}")
        
        confirm = input("\n🚀 Proceed with loading? (y/N): ").strip().lower()
        return confirm in ['y', 'yes']
    
    def load_years(self, start_year: str, end_year: str, batch_size: int = 200):
        """Load years with progress tracking"""
        available_years = self.loader.get_available_years()
        years_to_load = [y for y in available_years if start_year <= y <= end_year]
        
        if not years_to_load:
            print("❌ No years found in the specified range")
            return
        
        # Reverse order to load recent years first
        years_to_load.reverse()
        
        print(f"\n🚀 Starting progressive loading...")
        print(f"📅 Loading {len(years_to_load)} years in reverse order (recent first)")
        
        start_time = time.time()
        total_cves = self.year_loader.load_multiple_years(years_to_load, batch_size)
        end_time = time.time()
        
        duration = end_time - start_time
        
        # Final summary
        print("\n" + "=" * 60)
        print("🎉 LOADING COMPLETED!")
        print("=" * 60)
        print(f"✅ Total CVEs loaded: {total_cves:,}")
        print(f"⏱️  Total time: {duration/60:.1f} minutes")
        print(f"🚀 Average speed: {total_cves/(duration/60):.0f} CVEs/minute")
        
        # Show final stats
        self.show_stats()
    
    def run(self):
        """Main execution"""
        self.show_banner()
        
        # Test connection
        if not self.test_connection():
            return
        
        while True:
            self.show_menu()
            choice = input("\nEnter your choice (0-6): ").strip()
            
            if choice == "0":
                print("\n👋 Goodbye!")
                break
            elif choice == "5":
                self.show_stats()
                input("\nPress Enter to continue...")
                continue
            elif choice == "6":
                print("\n🔄 Resume functionality not implemented yet")
                input("Press Enter to continue...")
                continue
            elif choice in ["1", "2", "3", "4"]:
                start_year, end_year = self.get_year_range(choice)
                
                if self.confirm_operation(start_year, end_year):
                    self.load_years(start_year, end_year)
                    
                    # Ask to continue
                    if input("\n🔄 Load more data? (y/N): ").strip().lower() not in ['y', 'yes']:
                        break
                else:
                    print("❌ Operation cancelled")
            else:
                print("❌ Invalid choice. Please try again.")
        
        # Cleanup
        self.loader.close()
        print("\n✅ Connection closed. Thank you for using CVE Progressive Loader!")


def main():
    """Main entry point"""
    try:
        loader = CVEProgressiveLoader()
        loader.run()
    except KeyboardInterrupt:
        print("\n\n👋 Interrupted by user. Goodbye!")
    except Exception as e:
        print(f"\n❌ Unexpected error: {e}")
        print("Please check your setup and try again.")


if __name__ == "__main__":
    main()
